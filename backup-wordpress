#!/bin/bash
#
# backup-wordpress-site
#
# simple script to write backups using rsync, skipping non-changed files by
# hardlinking them. To backup the wordpress site, both the wordpress directory
# need to be backed up as well as the mysql database.
#
# Steven Vancoillie

# user settings: change these to reflect your installation
############################################################
# settings of the remote web server
SSH_USER=""   # user with SSH access to web server
SSH_HOST=""   # hostname of the web server
SSH_KEY=""    # optional SSH key location
SRC_DIR=""    # WordPress directory
WP_USER=""    # database user
WP_PASS=""    # database password
WP_DB=""      # database name
BINLOG_DIR="" # location of mysql binary logs
# settings for the local backup
BACKUP_DIR="" # existing directory where backups will be located
############################################################

# initial parameters
DRY_RUN=0
VEBROSE=0
RSYNC_ARGS="-z"

ME=${0##*/}

# function which prints usage information
usage () {
        echo "Usage: ${ME} [-h] [options]"
        echo
        echo "Options:"
        echo "  -v           verbose output"
        echo "  -n           perform a dry-run, no backup is made"
        echo "  -l level     level of the backup: 0 = full backup,"
        echo "               higher levels hardlink unchanged files"
        echo "               agains the most recent level that was"
        echo "               1 lower (default = 0)"
        echo
}

# function that executes a command remotely
remote () {
        ssh -l "${SSH_USER}" -i "${SSH_KEY}" "${SSH_HOST}" $*
}

# helper functions
message () {
        echo "${ME}: $*"
}

error () {
        message "ERROR: $*"
        exit 1
}

success () {
        if ((!DRY_RUN))
        then
                touch "${BACKUP_DIR}/${BACKUP_ID}/SUCCESS"
                message "--> backup successful!"
        fi
        exit 0
}

failure () {
        if ((!DRY_RUN))
        then
                touch "${BACKUP_DIR}/${BACKUP_ID}/FAILURE"
        fi
        message "####################################"
        message "## backup FAILED, please check!!! ##"
        message "####################################"
        exit 1;
}

# stop on commands that do not complete properly
trap "failure" ERR

# parse options
while getopts "hzvnl:" opt
do
        case ${opt} in
                h) usage
                        exit 0 ;;
                v) VERBOSE=1
                        RSYNC_ARGS+=" -v" ;;
                n) DRY_RUN=1
                        RSYNC_ARGS+=" -n" ;;
                l) LEVEL="${OPTARG}" ;;
                *) usage
                        exit 1;;
        esac
done

if [[ -z "${LEVEL}" ]]
then
        LEVEL=0
fi

# paranoia sanity check, shouldn't happen
if [[ ! -d "${BACKUP_DIR}" ]]; then
        error "non-existing backup directory"
fi

# create the backup BACKUP_ID
BACKUP_ID="$(date +%F_%T).level${LEVEL}"
if [[ -z "${BACKUP_ID}" ]]
then
        error "empty BACKUP_ID"
elif [[ -d "${BACKUP_DIR}/${BACKUP_ID}/" ]]
then
        error "existing BACKUP_ID"
fi
# set the local directory
DST_DIR=$(basename ${SRC_DIR})
if [[ -z "${DST_DIR}" ]]
then
        DST_DIR="wp-site"
fi

if ((DRY_RUN))
then
        message "#######################################"
        message "## DRY-RUN, NO ACTUAL BACKUP IS MADE!##"
        message "#######################################"
fi
message "making backup of"
message "    ${SRC_DIR}"
message " ON ${SSH_HOST}"
message " TO ${BACKUP_DIR}/${BACKUP_ID}"
if ((!DRY_RUN))
then
        mkdir -p "${BACKUP_DIR}/${BACKUP_ID}"
fi

# rsync the contents of the source to the destination directory:
# -> creates hardlinks of unaltered files against the most recent backup that was made
# -> uses relative paths to preserve full path on the backup, so that
#    a backup of /home/user/foo on /backup becomes /backup/id/home/user/foo

if [[ "${LEVEL}" != "0" ]]
then
        PREVIOUS_LEVEL=$(realpath "${BACKUP_DIR}/recent.level$((LEVEL-1))")
        if [[ ! -d "${PREVIOUS_LEVEL}" ]]
        then
                error "cannot perform level ${LEVEL} backup, no lower level found"
        fi
        if ((!DRY_RUN))
        then
                ln -s "${PREVIOUS_LEVEL}" "${BACKUP_DIR}/${BACKUP_ID}/"
        fi
        message "performing level ${LEVEL} backup against"
        message "   ${PREVIOUS_LEVEL}"
        rsync -a ${RSYNC_ARGS} \
                --link-dest="${PREVIOUS_LEVEL}/${DST_DIR}" \
                -e "ssh -l ${SSH_USER} -i ${SSH_KEY}" \
                "${SSH_HOST}:${SRC_DIR}/" \
                "${BACKUP_DIR}/${BACKUP_ID}/${DST_DIR}/"
else
        rsync -a ${RSYNC_ARGS} \
                -e "ssh -l ${SSH_USER} -i ${SSH_KEY}" \
                "${SSH_HOST}:${SRC_DIR}/" \
                "${BACKUP_DIR}/${BACKUP_ID}/${DST_DIR}/"
fi

# create a backup of the mysql database
if ((!DRY_RUN))
then
        ssh -l "${SSH_USER}" -i "${SSH_KEY}" "${SSH_HOST}" \
                mysqldump -u "${WP_USER}" -p"${WP_PASS}" \
                --flush-logs --single-transaction "${WP_DB}" \
                > "${BACKUP_DIR}/${BACKUP_ID}/${WP_DB}.sql"
        ssh -l "${SSH_USER}" -i "${SSH_KEY}" "${SSH_HOST}" \
                tar -O -z -C "${BINLOG_DIR}" -c . \
                > "${BACKUP_DIR}/${BACKUP_ID}/mysql-binlog.tgz"
else
        message "\$" ssh -l "${SSH_USER}" -i "${SSH_KEY}" "${SSH_HOST}" \
                mysqldump -u "${WP_USER}" -p"${WP_PASS}" \
                --flush-logs --single-transaction "${WP_DB}" \
                ">" "${BACKUP_DIR}/${BACKUP_ID}/${WP_DB}.sql"
        message "\$" ssh -l "${SSH_USER}" -i "${SSH_KEY}" "${SSH_HOST}" \
                tar -O -z -C "${BINLOG_DIR}" -c . \
                ">" "${BACKUP_DIR}/${BACKUP_ID}/mysql-binlog.tgz"
fi

# update link pointing to most recent backup
if ((!DRY_RUN))
then
        ln -sfT "${BACKUP_DIR}/${BACKUP_ID}" "${BACKUP_DIR}/recent.level${LEVEL}"
fi

success
